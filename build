#!/bin/sh

name="devenv"
version=2.0.0

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   print usage with examples.
show_help() {
	cat << EOF
${name} version: ${version}

Usage:

	build [Options] [Stages]

	build
	build image
	build container
	build --dryrun image container
	build --version
	build --help

Stages:

	image:          build container image
	container:      create and initialise container
	enter:          enter the container
	wsl:            build a WSL image
	bin:            add script which enters devenv to user's bin directory

Options:

	--dry-run/-d:   only print the command generated
	--version/-V:   show ${name} version
	--help/-h:      show this message
EOF
}

# Defaults
if [ $# -eq 0 ] || [ "$*" == "--dryrun" ] || [ "$*" == "-d" ]; then
	image=1
	container=1
else
	image=0
	container=0
fi
enter=0
wsl=0
bin=0
dryrun=0

# Parse arguments
while :; do
	case $1 in
		image)
			image=1
			shift
			;;
		container)
			container=1
			shift
			;;
		enter)
			enter=1
			shift
			;;
		wsl)
			wsl=1
			shift
			;;
		bin)
			bin=1
			shift
			;;
		-d | --dryrun)
			dryrun=1
			shift
			;;
		-V | --version)
			printf "${name}: %s\n" "${version}"
			exit 0
			;;
		-h | --help)
			show_help
			exit 0
			;;
		--) # End of all options.
			shift
			break
			;;
		-*) # Invalid options.
			printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
			show_help
			exit 1
			;;
		*)  # Invalid subcommand.
			if [ -n "$1" ]; then
				printf >&2 "ERROR: Invalid subcommand '%s'\n\n" "$1"
				show_help
				exit 1
			else
				break
			fi
			;;
	esac
done

declare -a cmd

run() {
	if [ "${dryrun}" -ne 0 ]; then
		echo "$*"
		echo  # Add blank line before next output.
	else
		eval "$@"
	fi
}

write_to_file() {
	if [ "${dryrun}" -ne 0 ]; then
		echo "Write the following to $1:$(printf '\n```\n%s\n```\n' "$(printf '%s\n' "${@:2}")")"
		echo  # Add blank line before next output.
	else
		printf '%s\n' "${@:2}" > $1
	fi
}

if [ "${image}" -ne 0 ]; then
	args=(
		--pull=newer
		--label devenv.version=${version}
		--tag ${name}:latest
		--tag ${name}:${version}
		# Set context as directory containing this script.
		"$(dirname "$0")"
	)
	run podman build $(printf "%s " "${args[@]}")
fi

if [ "${container}" -ne 0 ]; then
	run SHELL=/bin/zsh distrobox assemble create --replace --file distrobox.ini
	run distrobox enter --no-tty $name -- init_container.sh --
fi

if [ "${enter}" -ne 0 ]; then
	run distrobox enter $name
fi

if [ "${wsl}" -ne 0 ]; then
	run ./build-wsl $name
fi

if [ "${bin}" -ne 0 ]; then
	excfile="${HOME}/.local/bin/${name}"
	content=('#!/bin/sh' '' "distrobox enter ${name}")
	write_to_file $excfile "${content[@]}"
	run chmod +x $excfile
fi
