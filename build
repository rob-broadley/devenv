#!/bin/sh

name="devenv"
version=2.1.0

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   print usage with examples.
show_help() {
	cat << EOF
${name} version: ${version}

Usage:

	build [Options] [Stages]

	build
	build image
	build container
	build --dryrun image container
	build --version
	build --help

Stages:

	pull:           pull the base image
	image:          build container image
	container:      create and initialise container
	enter:          enter the container
	wsl:            build a WSL image
	bin:            add script which enters devenv to user's bin directory

Options:

	--dryrun/-d:    only print the command generated
	--version/-V:   show ${name} version
	--help/-h:      show this message
EOF
}

# Defaults
if [ $# -eq 0 ] || [ "$*" = "--dryrun" ] || [ "$*" = "-d" ]; then
	pull=1
	image=1
	container=1
else
	pull=0
	image=0
	container=0
fi
enter=0
wsl=0
bin=0
dryrun=0

# Parse arguments
while :; do
	case $1 in
		pull)
			pull=1
			shift
			;;
		image)
			image=1
			shift
			;;
		container)
			container=1
			shift
			;;
		enter)
			enter=1
			shift
			;;
		wsl)
			wsl=1
			shift
			;;
		bin)
			bin=1
			shift
			;;
		-d | --dryrun)
			dryrun=1
			shift
			;;
		-V | --version)
			printf "${name}: %s\n" "${version}"
			exit 0
			;;
		-h | --help)
			show_help
			exit 0
			;;
		--) # End of all options.
			shift
			break
			;;
		-*) # Invalid options.
			printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
			show_help
			exit 1
			;;
		*)  # Invalid subcommand.
			if [ -n "$1" ]; then
				printf >&2 "ERROR: Invalid subcommand '%s'\n\n" "$1"
				show_help
				exit 1
			else
				break
			fi
			;;
	esac
done

# Run or print command, depending on state of $dryrun.
# Globals:
#		dryrun
# Arguments:
#   Command to run.
#   Arguments for command to run.
# Outputs:
#   If dryrun set print command which would be run.
run() {
	if [ "${dryrun}" -ne 0 ]; then
		echo "$*"
		echo  # Add blank line before next output.
	else
		"$@"
	fi
}

# Write text to file or display text which would be written,
# depending on state of $dryrun.
# Overwrites the file, rather than appending.
# Globals:
#		dryrun
# Arguments:
#   File to write to, a path.
#   Lines to write to the file, an array.
# Outputs:
#   If dryrun set print file path and content which would be written.
write_to_file() {
	file="$1"
	shift  # Make $@ be just the content to write.
	if [ "${dryrun}" -ne 0 ]; then
		# Insert line breaks between lines (items in array) and then add fence around
		# content to be written. Then output that after declaring where it will be written.
		# shellcheck disable=SC2016
		# False positive, in '\n```\n%s\n```\n' the backticks are not defining an expression.
		echo "Write the following to $file:$(printf '\n```\n%s\n```\n' "$(printf '%s\n' "$@")")"
		echo  # Add blank line before next output.
	else
		printf '%s\n' "$@" > "$file"
	fi
}

if [ "${pull}" -ne 0 ]; then
	images_to_pull=$(grep FROM Containerfile | sed 's/FROM //g' | sed 's/ as .*$//g')
	for image_to_pull in $images_to_pull; do
		run podman pull "$image_to_pull"
	done
fi

if [ "${image}" -ne 0 ]; then
	args="\
		--label devenv.version=${version}\
		--tag ${name}:latest\
		--tag ${name}:${version}\
		$(dirname "$0")\
	"
	# shellcheck disable=SC2046
	# Word splitting is required here.
	run podman build $(echo "$args" | xargs)
fi

if [ "${container}" -ne 0 ]; then
	run export SHELL=/bin/zsh
	run distrobox assemble create --replace --file distrobox.ini
	run distrobox enter --no-tty $name -- init_container.sh --
fi

if [ "${wsl}" -ne 0 ]; then
	run ./build-wsl $name
fi

if [ "${bin}" -ne 0 ]; then
	excfile="${HOME}/.local/bin/${name}"
	write_to_file "$excfile" \
		'#!/bin/sh' \
		'' \
		"distrobox enter ${name}"
	run chmod +x "$excfile"
fi

if [ "${enter}" -ne 0 ]; then
	run distrobox enter $name
fi
