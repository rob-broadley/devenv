#!/bin/sh

name="${1:-devenv}"

DEFAULT_UID=1000

WSL_DIR="wsl"
TMP_DIR="$WSL_DIR/tmp"
mkdir -p $TMP_DIR
CONTAINER_WSL_LIB="/usr/lib/wsl"

# Script to modify image before distribution.
MODS_TEMPLATE="$WSL_DIR/image_mod.sh"
LOCAL_MODS="$TMP_DIR/image_mod.sh"
CONTAINER_MODS="/tmp/setup.sh"

# Script for initial setup by user once installed.
INIT_TEMPLATE="$WSL_DIR/initial_setup.sh"
LOCAL_INIT="$TMP_DIR/initial_setup.sh"
CONTAINER_INIT="$CONTAINER_WSL_LIB/initial-setup.sh"

# WSL distribution configuration and associated files.
DIST_CONF_TEMPLATE="$WSL_DIR/wsl-distribution.conf"
LOCAL_DIST_CONF="$TMP_DIR/wsl-distribution.conf"
CONTAINER_DIST_CONF="/etc/wsl-distribution.conf"

LOCAL_ICON="$WSL_DIR/devenv.ico"
CONTAINER_ICON="$CONTAINER_WSL_LIB/devenv.ico"

LOCAL_TERMINAL_PROFILE="$WSL_DIR/terminal-profile.json"
CONTAINER_TERMINAL_PROFILE="$CONTAINER_WSL_LIB/terminal-profile.json"

# Fix for WSLg runtime files not available in XDG_RUNTIME_DIR.
LOCAL_RUNTIME_DIR_OVERRIDE="$WSL_DIR/runtime-dir-override.conf"
CONTAINER_RUNTIME_DIR_OVERRIDE="/etc/systemd/system/user-runtime-dir@.service.d/override.conf"

# WSL specific configuration for neovim.
LOCAL_WSL_NVIM="$WSL_DIR/nvim-wsl.lua"
CONTAINER_WSL_NVIM="/etc/xdg/nvim/lua/wsl.lua"

PROFILE_FILE="/etc/profile.local"

repo="$(realpath $(dirname "$0"))"
containerfile="${repo}/Containerfile"


# =====================================================================================
# Get container image to use.
# =====================================================================================
# Use the last created devenv image.
image=$(podman images --format '{{.Repository}}:{{.Tag}}' $name | head -n 1)
if [ -z "$image" ]
then
	echo "Error: no image for ${name}"
	exit 1
fi
echo "Using image: $image"


# =====================================================================================
# Create pre-export setup script.
# =====================================================================================
cat $MODS_TEMPLATE \
	| sed "s|{{ profile_file }}|$PROFILE_FILE|g" \
	> $LOCAL_MODS

echo >> $LOCAL_MODS  # Add blank line.
echo "# Make sure WSL lib directory is created for files to be copied to." >> $LOCAL_MODS
echo "mkdir -p $CONTAINER_WSL_LIB" >> $LOCAL_MODS

echo >> $LOCAL_MODS  # Add blank line.
echo "# Make sure systemd runtimedir override directory is created for files to be copied to." >> $LOCAL_MODS
echo "mkdir -p $(dirname -- $CONTAINER_RUNTIME_DIR_OVERRIDE)" >> $LOCAL_MODS

# Extract environment variables from Containerfile
# Separate on lines beginning with ENV on white space but not if inside quotes.
# Output string {2nd column}={3rd column} e.g. ENV EDITOR nvim > EDITOR=nvim
# Substitute " for \" in variable value (escape the " char)
ENVS=$(\
	awk 'BEGIN {FPAT = "([^ ]+)|(\"[^\"]+\")"} /^ENV/{ gsub(/"/, "\\\"", $3); gsub(/\$/, "\\$", $3); print $2"="$3; }' $containerfile
)

# Output commands to ensure environment variables defined in /etc/profile.local
echo >> $LOCAL_MODS  # Add blank line.
echo "# Set up entrypoint variables." >> $LOCAL_MODS
echo "touch $PROFILE_FILE" >> $LOCAL_MODS
while IFS= read -r line
do
	setvarline="export $line"
	echo ensure_line_in_file \"$setvarline\" "$PROFILE_FILE" >> $LOCAL_MODS
done <<< "$ENVS"

echo ensure_line_in_file \"export BROWSER=/mnt/c/Windows/explorer.exe\" /etc/profile.local >> $LOCAL_MODS

chmod +x $LOCAL_MODS


# =====================================================================================
# Create initial setup script for WSL.
# =====================================================================================
cat $INIT_TEMPLATE \
	| sed "s|{{ uid }}|$DEFAULT_UID|g" \
	> $LOCAL_INIT
chmod +x $LOCAL_INIT


# =====================================================================================
# Create WSL distribution configuration file from a template.
# =====================================================================================
cat $DIST_CONF_TEMPLATE \
	| sed "s|{{ initial_setup_script }}|$CONTAINER_INIT|g" \
	| sed "s|{{ uid }}|$DEFAULT_UID|g" \
	| sed "s|{{ icon }}|$CONTAINER_ICON|g" \
	| sed "s|{{ terminal_profile_template }}|$CONTAINER_TERMINAL_PROFILE|g" \
	> $LOCAL_DIST_CONF


# =====================================================================================
# Create container and export to tar file.
# =====================================================================================
container=$(podman run -i --detach --entrypoint=sh $image)

podman cp $LOCAL_MODS $container:$CONTAINER_MODS
echo "Running setup inside container '${container:0:8}' ($image)"
podman exec $container sh -c "$CONTAINER_MODS; rm $CONTAINER_MODS"

podman cp $LOCAL_INIT $container:$CONTAINER_INIT
podman cp $LOCAL_DIST_CONF $container:$CONTAINER_DIST_CONF
podman cp $LOCAL_TERMINAL_PROFILE $container:$CONTAINER_TERMINAL_PROFILE
podman cp $LOCAL_ICON $container:$CONTAINER_ICON
podman cp $LOCAL_RUNTIME_DIR_OVERRIDE $container:$CONTAINER_RUNTIME_DIR_OVERRIDE
podman cp $LOCAL_WSL_NVIM $container:$CONTAINER_WSL_NVIM

output="$(echo "${image##*/}" | tr ':.' '-_').wsl"
echo "Exporting container '${container:0:8}' to $output"
podman export $container | gzip > $output

echo "Stopping container: ${container:0:8}"
podman stop $container > /dev/null

echo "Removing container: ${container:0:8}"
podman rm $container > /dev/null


# =====================================================================================
# Clean up and exit.
# =====================================================================================
rm -r $TMP_DIR
echo Done
